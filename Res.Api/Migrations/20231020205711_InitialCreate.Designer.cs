// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Res.Infrastructure.Data;

#nullable disable

namespace Res.Api.Migrations
{
    [DbContext(typeof(ResDbContext))]
    [Migration("20231020205711_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoxCashBranchStore", b =>
                {
                    b.Property<int>("BoxCashId")
                        .HasColumnType("int");

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.HasKey("BoxCashId", "BranchStoreId");

                    b.HasIndex("BranchStoreId");

                    b.ToTable("BoxCashBranchStore");
                });

            modelBuilder.Entity("BranchStoreAddress", b =>
                {
                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("BranchStoreId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("BranchStoreAddress");
                });

            modelBuilder.Entity("BranchStoreGeographicalZone", b =>
                {
                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("GeographicalZoneId")
                        .HasColumnType("int");

                    b.HasKey("BranchStoreId", "GeographicalZoneId");

                    b.HasIndex("GeographicalZoneId");

                    b.ToTable("BranchStoreGeographicalZone");
                });

            modelBuilder.Entity("CartDrink", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.HasKey("CartId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("CartDrink");
                });

            modelBuilder.Entity("CartFood", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasKey("CartId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("CartFood");
                });

            modelBuilder.Entity("CategoryDrink", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("CategoryDrink");
                });

            modelBuilder.Entity("CategoryFood", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("CategoryFood");
                });

            modelBuilder.Entity("DrinkMenu", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("DrinkId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("DrinkMenu");
                });

            modelBuilder.Entity("EmployeeAddress", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("FoodMenu", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("FoodMenu");
                });

            modelBuilder.Entity("Res.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("InternalNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Res.Domain.Entities.BoxCash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BoxCash");
                });

            modelBuilder.Entity("Res.Domain.Entities.BranchStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("(N'SUC')");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsCentralBranchStore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RFC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchStore");
                });

            modelBuilder.Entity("Res.Domain.Entities.BranchStoreEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobId");

                    b.ToTable("BranchStoreEmployee");
                });

            modelBuilder.Entity("Res.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Res.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Res.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedAtBranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC076D7D9088");

                    b.HasIndex("CreatedAtBranchStoreId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC07A20A3AD6");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("Res.Domain.Entities.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3214EC0756D118DC");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("Res.Domain.Entities.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("Res.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Curp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CURP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Ine")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INE");

                    b.Property<int>("InitialBranchStoreId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("InitialBranchStoreId");

                    b.HasIndex("JobId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Res.Domain.Entities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Res.Domain.Entities.GeographicalZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("GeographicalZone");
                });

            modelBuilder.Entity("Res.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Res.Domain.Entities.ManagerZoneBranchStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ManagerZoneBranchStore");
                });

            modelBuilder.Entity("Res.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(375)
                        .HasColumnType("nvarchar(375)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Res.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Res.Domain.Entities.OrderDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDrink");
                });

            modelBuilder.Entity("Res.Domain.Entities.OrderFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFood");
                });

            modelBuilder.Entity("Res.Domain.Entities.PayBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxCashId")
                        .HasColumnType("int");

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoxCashId");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CashierId");

                    b.HasIndex("TicketId");

                    b.ToTable("PayBox");
                });

            modelBuilder.Entity("Res.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRecieve")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CashRegisterId")
                        .HasColumnType("int");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CashRegisterId");

                    b.HasIndex("CashierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Res.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Res.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(N'Admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(52)
                        .HasColumnType("nvarchar(52)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Res.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseTicket")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BranchStoreId");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Res.Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoxCashId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("BoxCashId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("UserAccountBranchStore", b =>
                {
                    b.Property<int>("BranchStoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("BranchStoreId", "UserAccountId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccountBranchStore");
                });

            modelBuilder.Entity("UserAccountEmployee", b =>
                {
                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("UserAccountId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserAccountEmployee");
                });

            modelBuilder.Entity("UserRol", b =>
                {
                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UserAccountId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UserRol");
                });

            modelBuilder.Entity("BoxCashBranchStore", b =>
                {
                    b.HasOne("Res.Domain.Entities.BoxCash", null)
                        .WithMany()
                        .HasForeignKey("BoxCashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.BranchStore", null)
                        .WithMany()
                        .HasForeignKey("BranchStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BranchStoreAddress", b =>
                {
                    b.HasOne("Res.Domain.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchStoreAddress_Address");

                    b.HasOne("Res.Domain.Entities.BranchStore", null)
                        .WithMany()
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchStoreAddress_BranchStore");
                });

            modelBuilder.Entity("BranchStoreGeographicalZone", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", null)
                        .WithMany()
                        .HasForeignKey("BranchStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.GeographicalZone", null)
                        .WithMany()
                        .HasForeignKey("GeographicalZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartDrink", b =>
                {
                    b.HasOne("Res.Domain.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartFood", b =>
                {
                    b.HasOne("Res.Domain.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryDrink", b =>
                {
                    b.HasOne("Res.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryFood", b =>
                {
                    b.HasOne("Res.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrinkMenu", b =>
                {
                    b.HasOne("Res.Domain.Entities.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeAddress", b =>
                {
                    b.HasOne("Res.Domain.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeAddress_Address");

                    b.HasOne("Res.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeAddress_Employee");
                });

            modelBuilder.Entity("FoodMenu", b =>
                {
                    b.HasOne("Res.Domain.Entities.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Res.Domain.Entities.BranchStoreEmployee", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("BranchStoreEmployee")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchStoreEmployee_BranchStore");

                    b.HasOne("Res.Domain.Entities.Employee", "Employee")
                        .WithMany("BranchStoreEmployee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Job", "Job")
                        .WithMany("BranchStoreEmployee")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchStoreEmployee_BranchStoreEmployee");

                    b.Navigation("BranchStore");

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Res.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Cart")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_BranchStore");

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("Cart")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Customer");

                    b.Navigation("BranchStore");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "CreatedAtBranchStore")
                        .WithMany("Customer")
                        .HasForeignKey("CreatedAtBranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Customer");

                    b.HasOne("Res.Domain.Entities.CustomerType", "CustomerType")
                        .WithMany("Customer")
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_CustomerType");

                    b.HasOne("Res.Domain.Entities.UserAccount", null)
                        .WithMany("Customer")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("CreatedAtBranchStore");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("Res.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Res.Domain.Entities.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddress_Address");

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddress_Customer");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "InitialBranchStore")
                        .WithMany("Employee")
                        .HasForeignKey("InitialBranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_BranchStore");

                    b.HasOne("Res.Domain.Entities.Job", "Job")
                        .WithMany("Employee")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Job");

                    b.Navigation("InitialBranchStore");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Res.Domain.Entities.ManagerZoneBranchStore", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("ManagerZoneBranchStore")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_ManagerZoneBranchStore_BranchStore");

                    b.HasOne("Res.Domain.Entities.Employee", "Employee")
                        .WithMany("ManagerZoneBranchStore")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_ManagerZoneBranchStore_Employee");

                    b.Navigation("BranchStore");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Res.Domain.Entities.Menu", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Menu")
                        .HasForeignKey("BranchStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchStore");
                });

            modelBuilder.Entity("Res.Domain.Entities.Order", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Order")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchStore_Order");

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Order");

                    b.Navigation("BranchStore");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.OrderDrink", b =>
                {
                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Drink", "Drink")
                        .WithMany("OrderDrink")
                        .HasForeignKey("DrinkId")
                        .IsRequired()
                        .HasConstraintName("FK_CartDrink_Cart");

                    b.HasOne("Res.Domain.Entities.Order", "Order")
                        .WithMany("OrderDrink")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Drink_Cart");

                    b.Navigation("Customer");

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Res.Domain.Entities.OrderFood", b =>
                {
                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Food", "Food")
                        .WithMany("OrderFood")
                        .HasForeignKey("FoodId")
                        .IsRequired()
                        .HasConstraintName("FK_CartFood_Cart");

                    b.HasOne("Res.Domain.Entities.Order", "Order")
                        .WithMany("OrderFood")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Food_Cart");

                    b.Navigation("Customer");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Res.Domain.Entities.PayBox", b =>
                {
                    b.HasOne("Res.Domain.Entities.BoxCash", "BoxCash")
                        .WithMany("PayBox")
                        .HasForeignKey("BoxCashId")
                        .IsRequired()
                        .HasConstraintName("FK_PayBox_BoxCash");

                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("PayBox")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_PayBox_BranchStore");

                    b.HasOne("Res.Domain.Entities.UserAccount", "Cashier")
                        .WithMany("PayBox")
                        .HasForeignKey("CashierId")
                        .IsRequired()
                        .HasConstraintName("FK_PayBox_UserAccount");

                    b.HasOne("Res.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxCash");

                    b.Navigation("BranchStore");

                    b.Navigation("Cashier");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Res.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Payment")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_BranchStore");

                    b.HasOne("Res.Domain.Entities.BoxCash", "CashRegister")
                        .WithMany("Payment")
                        .HasForeignKey("CashRegisterId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_BoxCash");

                    b.HasOne("Res.Domain.Entities.Employee", "Cashier")
                        .WithMany("Payment")
                        .HasForeignKey("CashierId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Employee");

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("Payment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchStore");

                    b.Navigation("CashRegister");

                    b.Navigation("Cashier");

                    b.Navigation("Customer");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Res.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Reservation")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_BranchStore");

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("Reservation")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Customer");

                    b.HasOne("Res.Domain.Entities.Employee", "Manager")
                        .WithMany("Reservation")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Employee");

                    b.Navigation("BranchStore");

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Res.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", "BranchStore")
                        .WithMany("Ticket")
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_BranchStore");

                    b.HasOne("Res.Domain.Entities.Cart", "Cart")
                        .WithOne("Ticket")
                        .HasForeignKey("Res.Domain.Entities.Ticket", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Res.Domain.Entities.Customer", "Customer")
                        .WithMany("Ticket")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Customer");

                    b.Navigation("BranchStore");

                    b.Navigation("Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("Res.Domain.Entities.BoxCash", null)
                        .WithMany("EmployeePaymentAccount")
                        .HasForeignKey("BoxCashId");
                });

            modelBuilder.Entity("UserAccountBranchStore", b =>
                {
                    b.HasOne("Res.Domain.Entities.BranchStore", null)
                        .WithMany()
                        .HasForeignKey("BranchStoreId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccountBranchStore_BranchStore");

                    b.HasOne("Res.Domain.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccountBranchStore_UserAccount");
                });

            modelBuilder.Entity("UserAccountEmployee", b =>
                {
                    b.HasOne("Res.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccountEmployee_Employee");

                    b.HasOne("Res.Domain.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccountEmployee_UserAccount");
                });

            modelBuilder.Entity("UserRol", b =>
                {
                    b.HasOne("Res.Domain.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRol_Rol");

                    b.HasOne("Res.Domain.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRol_UserAccount");
                });

            modelBuilder.Entity("Res.Domain.Entities.Address", b =>
                {
                    b.Navigation("CustomerAddress");
                });

            modelBuilder.Entity("Res.Domain.Entities.BoxCash", b =>
                {
                    b.Navigation("EmployeePaymentAccount");

                    b.Navigation("PayBox");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Res.Domain.Entities.BranchStore", b =>
                {
                    b.Navigation("BranchStoreEmployee");

                    b.Navigation("Cart");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ManagerZoneBranchStore");

                    b.Navigation("Menu");

                    b.Navigation("Order");

                    b.Navigation("PayBox");

                    b.Navigation("Payment");

                    b.Navigation("Reservation");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Res.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Res.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerAddress");

                    b.Navigation("Order");

                    b.Navigation("Payment");

                    b.Navigation("Reservation");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Res.Domain.Entities.CustomerType", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Res.Domain.Entities.Drink", b =>
                {
                    b.Navigation("OrderDrink");
                });

            modelBuilder.Entity("Res.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BranchStoreEmployee");

                    b.Navigation("ManagerZoneBranchStore");

                    b.Navigation("Payment");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Res.Domain.Entities.Food", b =>
                {
                    b.Navigation("OrderFood");
                });

            modelBuilder.Entity("Res.Domain.Entities.Job", b =>
                {
                    b.Navigation("BranchStoreEmployee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Res.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDrink");

                    b.Navigation("OrderFood");
                });

            modelBuilder.Entity("Res.Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("PayBox");
                });
#pragma warning restore 612, 618
        }
    }
}
